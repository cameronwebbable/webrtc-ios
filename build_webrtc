#!/bin/bash
function fetch() {
echo "-- fetching webrtc"
gclient config http://webrtc.googlecode.com/svn/trunk/
echo "target_os = ['mac']" >> .gclient
gclient sync

sed -i "" '$d' .gclient
echo "target_os = ['ios', 'mac']" >> .gclient
gclient sync
echo "-- webrtc has been sucessfully fetched"

}

function wrbase() {
export GYP_DEFINES="build_with_libjinglth_chromium=0 libjingle_objc=1"
export GYP_GENERATORS="ninja"
}

function wrsim() {
wrbase
export GYP_DEFINES="$GYP_DEFINES OS=ios target_arch=ia32"
export GYP_GENERATOR_FLAGS="$GYP_GENERATOR_FLAGS output_dir=out_sim"
export GYP_CROSSCOMPILE=1
}

function wrios() {
wrbase
export GYP_DEFINES="$GYP_DEFINES OS=ios target_arch=armv7"
export GYP_GENERATOR_FLAGS="$GYP_GENERATOR_FLAGS output_dir=out_ios"
export GYP_CROSSCOMPILE=1
}

function wrmac() {
wrbase
export GYP_DEFINES="$GYP_DEFINES OS=mac target_arch=x64"
export GYP_GENERATOR_FLAGS="$GYP_GENERATOR_FLAGS output_dir=out_mac"
}


function upgradeSVN()
{
  pushd trunk
  svn upgrade
  popd
}

function buildsim() {
echo "-- building webrtc ios"
pushd trunk
# wrios && gclient runhooks && ninja -C out_ios/Debug-iphoneos
wrsim && gclient runhooks --force && ninja -C out_sim/Release-iphonesimulator AppRTCDemo

popd
echo "-- webrtc has been sucessfully built"
}


function buildios() {
echo "-- building webrtc ios"
pushd trunk
# wrios && gclient runhooks && ninja -C out_ios/Debug-iphoneos
wrios && gclient runhooks --force && ninja -C out_ios/Release-iphoneos AppRTCDemo

popd
echo "-- webrtc has been sucessfully built"
}

function launch() {
echo "-- launching on device"
ideviceinstaller -i trunk/out_ios/Release-iphoneos/AppRTCDemo.app
echo "-- launch complete"
}

function fail() {
echo "*** webrtc build failed"
exit 1
}

#fetch || fail
#wrsim || fail


wrios || fail
echo "building device libraries"
(buildios || fail) &

iosBuildPID=$!

wrsim || fail
echo "building simulator libraries"
(buildsim || fail) &

wait %1 %2 && echo "done building simulator libraries"

_dfiles="trunk/out_ios/Release-iphoneos/*.a"

rm -rf $"built_libs/"
mkdir $"built_libs/"
mkdir $"built_libs/device/"
mkdir $"built_libs/simulator/"
mkdir $"built_libs/headers/"

echo "copying libraries..."

for f in $_dfiles
do
	IFS='/' read -a array <<< "$f"
	
	echo "${array[3]}"
	echo "libjingle_p2p.a"
	if [ "${array[3]}" != "libjingle_p2p.a" ];
	then
		
	#Rename all device-specific libs
		(lipo -create $"trunk/out_sim/Release-iphonesimulator/${array[3]}" $"trunk/out_ios/Release-iphoneos/${array[3]}"  -output $"built_libs/${array[3]}") || cp $"trunk/out_ios/Release-iphoneos/${array[3]}" $"built_libs/device/${array[3]}"
	
		#remove unused simulator file
		rm $"trunk/out_sim/Release-iphonesimulator/${array[3]}"
	else
		mv $"trunk/out_ios/Release-iphoneos/${array[3]}" $"built_libs/device/${array[3]}"
	fi
	
done

#move any other simulator files over 
mv trunk/out_sim/Release-iphonesimulator/*.a built_libs/simulator

echo "done copying libs. copying headers..."

mv trunk/talk/app/webrtc/objc/public/*.h built_libs/headers

echo "done copying over items. let's put it in a nice zip folder"
mkdir $"zipped_lib"
zip -r zipped_lib/webrtc-ios-libs.zip built_libs

